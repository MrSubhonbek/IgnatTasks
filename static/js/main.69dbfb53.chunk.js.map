{"version":3,"sources":["p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.module.css","p2-homeworks/h1/Message.module.css","p2-homeworks/h3/Greeting.module.css","p2-homeworks/h4/HW4.module.css","p2-homeworks/h4/common/c2-SuperButton/SuperButton.module.css","p2-homeworks/h4/common/c3-SuperCheckbox/SuperCheckbox.module.css","p1-main/m1-ui/u1-app/App.module.css","p2-homeworks/h1/Message.tsx","p2-homeworks/h1/HW1.tsx","p2-homeworks/h2/Affair.tsx","p2-homeworks/h2/Affairs.tsx","p2-homeworks/h2/HW2.tsx","p2-homeworks/h3/Greeting.tsx","p2-homeworks/h3/GreetingContainer.tsx","p2-homeworks/h3/HW3.tsx","p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.tsx","p2-homeworks/h4/common/c2-SuperButton/SuperButton.tsx","p2-homeworks/h4/common/c3-SuperCheckbox/SuperCheckbox.tsx","p2-homeworks/h4/HW4.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Message","props","className","staly","message","src","avatar","alt","innerMessage","name","time","messageData","HW1","Affair","affair","priority","onClick","id","_id","deleteAffairCallback","Affairs","mappedAffairs","data","map","a","key","setFilter","defaultAffairs","HW2","useState","affairs","setAffairs","filter","filteredAffairs","af","filterAffairs","deleteAffair","Greeting","setNameCallback","addUser","error","totalUsers","inputClass","s","value","onChange","messageError","GreetingContainer","users","addUserCallback","setName","setError","length","e","currentTarget","trim","alert","HW3","setUsers","uuidv4","SuperInputText","type","onChangeText","onKeyPress","onEnter","spanClassName","restProps","finalSpanClassName","finalInputClassName","input","errorInput","superInput","SuperButton","red","finalClassName","default","SuperCheckbox","onChangeChecked","children","checkbox","checked","HW4","text","setText","showAlert","setChecked","column","blue","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.69dbfb53.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorInput\":\"SuperInputText_errorInput__2tiqA\",\"error\":\"SuperInputText_error__3go9o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3co4A\",\"innerMessage\":\"Message_innerMessage__1E9K5\",\"time\":\"Message_time__3-epC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageError\":\"Greeting_messageError__1TUgZ\",\"error\":\"Greeting_error__35aMr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blue\":\"HW4_blue__9NGi9\",\"column\":\"HW4_column__2dtgb\",\"testSpanError\":\"HW4_testSpanError__3pqmk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__nEab8\",\"red\":\"SuperButton_red__1Nu0T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__2A9J0\",\"spanClassName\":\"SuperCheckbox_spanClassName__1jzXc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3V8oU\"};","import React from 'react'\r\nimport staly from './Message.module.css'\r\n\r\ninterface IProps {\r\n    avatar: string,\r\n    name: string,\r\n    message: string,\r\n    time: string\r\n}\r\n\r\n\r\nfunction Message(props: IProps) {\r\n    return (\r\n        <div>\r\n            <div className={staly.message}>\r\n                <img src={props.avatar} alt=\"avatar\" />\r\n                <div className={staly.innerMessage}>\r\n                    <div>\r\n                        <div>{props.name}</div>\r\n                        <div>{props.message}</div>\r\n                    </div>\r\n                    <div className={staly.time}>{props.time}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Message\r\n","import React from 'react'\r\nimport Message from './Message'\r\n\r\nconst messageData = {\r\n    avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\r\n    name: 'Some Name',\r\n    message: 'some text',\r\n    time: '22:00',\r\n}\r\n\r\nfunction HW1() {\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            homeworks 1\r\n\r\n            {/*should work (должно работать)*/}\r\n\r\n            <Message\r\n               avatar={messageData.avatar}\r\n               name={messageData.name}\r\n               message={messageData.message}\r\n               time={messageData.time}\r\n            />\r\n\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeMessage/>*/}\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HW1\r\n","import React from 'react'\r\nimport { IAffair } from './HW2'\r\n\r\ntype AffairPropsType = {\r\n    // key не нужно типизировать\r\n    affair: IAffair // need to fix any\r\n    deleteAffairCallback: ( _id:number)=>void // need to fix any\r\n}\r\n\r\nfunction Affair(props: AffairPropsType) {\r\n    const deleteCallback = (id:number) => {\r\n        props.deleteAffairCallback(id)\r\n    }// need to fix\r\n\r\n    return (\r\n        <div>\r\n            {props.affair.name}\r\n            <span> </span>\r\n            {props.affair.priority}\r\n            <button onClick={()=>deleteCallback(props.affair._id)}>X</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Affair\r\n","import React, { Dispatch, SetStateAction } from 'react'\r\nimport Affair from './Affair'\r\nimport {FilterType, IAffair} from './HW2'\r\n\r\ntype AffairsPropsType = { // need to fix any\r\n    data: Array<IAffair>\r\n    setFilter:  (filter: FilterType)=>void\r\n    deleteAffairCallback: ( _id:number)=>void\r\n}\r\n\r\n\r\nfunction Affairs(props: AffairsPropsType) {\r\n    \r\n    const mappedAffairs = props.data.map((a: IAffair) => (\r\n        <Affair // should work\r\n            key={a._id} // кеи ОБЯЗАТЕЛЬНЫ в 99% - так что лучше их писать всегда при создании компонент в мапе\r\n            affair={a}\r\n            deleteAffairCallback={props.deleteAffairCallback}\r\n        />\r\n    ))\r\n    const setAll = () => { props.setFilter('all')} // need to fix\r\n    const setHigh = () => {props.setFilter('high')}\r\n    const setMiddle = () => {props.setFilter('middle')}\r\n    const setLow = () => {props.setFilter('low')}\r\n    \r\n    return (\r\n        <div>\r\n\r\n            {mappedAffairs}\r\n\r\n            <button onClick={setAll}>All</button>\r\n            <button onClick={setHigh}>High</button>\r\n            <button onClick={setMiddle}>Middle</button>\r\n            <button onClick={setLow}>Low</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Affairs\r\n","import React, { useState } from 'react'\r\nimport Affairs from './Affairs'\r\n\r\n// types\r\nexport type AffairPriorityType = 'high' | 'low' | 'middle'\r\nexport interface IAffair {\r\n    _id: number,\r\n    name: string,\r\n    priority: string\r\n}\r\nexport type FilterType = 'all' | AffairPriorityType\r\n\r\n// constants\r\nconst defaultAffairs: Array<IAffair> = [\r\n    { _id: 1, name: 'React', priority: 'high' },\r\n    { _id: 2, name: 'anime', priority: 'low' },\r\n    { _id: 3, name: 'games', priority: 'low' },\r\n    { _id: 4, name: 'work', priority: 'high' },\r\n    { _id: 5, name: 'html & css', priority: 'middle' },\r\n]\r\n\r\n// pure helper functions\r\nexport const filterAffairs = (affairs: Array<IAffair>, filter: FilterType): Array<IAffair> => {\r\n    if (filter === 'all') return affairs;\r\n    else if (filter === 'low') return affairs.filter(af => af.priority === filter);\r\n    else if (filter === 'middle') return affairs.filter(af => af.priority === filter);\r\n    else if (filter === 'high') return affairs.filter(af => af.priority === filter);\r\n    else return affairs\r\n}\r\nexport const deleteAffair = (affairs: Array<IAffair>, _id: number): Array<IAffair> => { \r\n    return affairs.filter(af => af._id !== _id) // need to fix\r\n}\r\n\r\nfunction HW2() {\r\n    const [affairs, setAffairs] = useState<Array<IAffair>>(defaultAffairs) \r\n    const [filter, setFilter] = useState<FilterType>('all')\r\n\r\n    const filteredAffairs = filterAffairs(affairs, filter)\r\n    const deleteAffairCallback = (_id: number) => setAffairs(deleteAffair(affairs, _id))\r\n    return (\r\n        <div>\r\n            <hr />\r\n            homeworks 2\r\n\r\n            {/*should work (должно работать)*/}\r\n            <Affairs\r\n                data={filteredAffairs}\r\n                setFilter={setFilter}\r\n                deleteAffairCallback={deleteAffairCallback}\r\n            />\r\n\r\n            <hr />\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeAffairs/>*/}\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HW2\r\n","import React, { MouseEventHandler } from 'react'\r\nimport s from './Greeting.module.css'\r\n\r\ntype GreetingPropsType = {\r\n    name: string // need to fix any\r\n    setNameCallback: (e:React.ChangeEvent<HTMLInputElement>)=>void // need to fix any\r\n    addUser: ()=>void // need to fix any\r\n    error: string // need to fix any\r\n    totalUsers: any // need to fix any\r\n}\r\n\r\n\r\n// презентационная компонента (для верстальщика)\r\nconst Greeting: React.FC<GreetingPropsType> = (\r\n    {name, setNameCallback, addUser, error, totalUsers} // деструктуризация пропсов\r\n) => {\r\n    const inputClass = s.error // need to fix with (?:)\r\n\r\n    return (\r\n        <div>\r\n            <input value={name} onChange={setNameCallback} className={error ? inputClass : \"\"}/>\r\n            <button onClick={addUser}>add</button>\r\n            <span>{totalUsers}</span>\r\n            { error &&\r\n                <div className={s.messageError}>{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Greeting\r\n","import React, { MouseEventHandler, useState } from 'react'\r\nimport Greeting from './Greeting'\r\nimport { UserType } from './HW3'\r\n\r\ntype GreetingContainerPropsType = {\r\n    users: Array<UserType> // need to fix any\r\n    addUserCallback: (name: string) => void // need to fix any\r\n}\r\n\r\nconst GreetingContainer: React.FC<GreetingContainerPropsType> = ({ users, addUserCallback }) => { // деструктуризация пропсов\r\n    const [name, setName] = useState<string>('') // need to fix any\r\n    const [error, setError] = useState<string>('') // need to fix any\r\n\r\n    const setNameCallback = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.currentTarget.value) // need to fix\r\n        setError(\"\")\r\n    }\r\n    const addUser = () => {\r\n        if (name.trim()) {\r\n            alert(`Hello  ${name}!`) // need to fix\r\n            addUserCallback(name);\r\n            setName(\"\")\r\n        } else {\r\n            setError(\"incorrectly added username!!!\")\r\n        }\r\n    }\r\n\r\n    const totalUsers = users.length // need to fix\r\n\r\n    return (\r\n        <Greeting\r\n            name={name}\r\n            setNameCallback={setNameCallback}\r\n            addUser={addUser}\r\n            error={error}\r\n            totalUsers={totalUsers}\r\n        />\r\n    )\r\n}\r\n\r\nexport default GreetingContainer\r\n","import React, {useState} from 'react'\r\nimport GreetingContainer from './GreetingContainer'\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport type UserType = {\r\n    _id: string, // need to fix any\r\n    name: string // need to fix any\r\n}\r\n\r\n// уровень работы с глобальными данными\r\nfunction HW3() {\r\n    const [users, setUsers] = useState<Array<UserType>>([]) // need to fix any\r\n\r\n    const addUserCallback = (name: string) => { // need to fix any\r\n        setUsers([...users, {name:name,_id: uuidv4()}]) // need to fix\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            homeworks 3\r\n\r\n            {/*should work (должно работать)*/}\r\n            <GreetingContainer users={users} addUserCallback={addUserCallback}/>\r\n\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeGreeting/>*/}\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HW3\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${s.input} ${error ? s.errorInput : s.superInput} ${className}` // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={'text'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e) \r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)        \r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React, {ChangeEvent, useState} from 'react'\r\nimport SuperInputText from './common/c1-SuperInputText/SuperInputText'\r\nimport s from './HW4.module.css'\r\nimport SuperButton from './common/c2-SuperButton/SuperButton'\r\nimport SuperCheckbox from './common/c3-SuperCheckbox/SuperCheckbox'\r\n\r\nfunction HW4() {\r\n    const [text, setText] = useState<string>('')\r\n    const error = text ? '' : 'error'\r\n\r\n    const showAlert = () => {\r\n        if (error) {\r\n            alert('введите текст...')\r\n        } else {\r\n            alert(text) // если нет ошибки показать текст\r\n        }\r\n    }\r\n\r\n    const [checked, setChecked] = useState<boolean>(false)\r\n    const testOnChange = (e: ChangeEvent<HTMLInputElement>) => setChecked(e.currentTarget.checked)\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            homeworks 4\r\n\r\n            <div className={s.column}>\r\n                <SuperInputText\r\n                    value={text}\r\n                    onChangeText={setText}\r\n                    onEnter={showAlert}\r\n                    error={error}\r\n                    // spanClassName={s.testSpanError}\r\n                />\r\n\r\n                <SuperInputText\r\n                    className={s.blue} // проверьте, рабоет ли смешивание классов\r\n                />\r\n\r\n                {/*----------------------------------------------------*/}\r\n\r\n                <SuperButton>\r\n                    default\r\n                </SuperButton>\r\n\r\n                <SuperButton\r\n                    red // пропсу с булевым значением не обязательно указывать true\r\n                    onClick={showAlert}\r\n                >\r\n                    delete {/*// название кнопки попадёт в children*/}\r\n                </SuperButton>\r\n\r\n                <SuperButton disabled>\r\n                    disabled\r\n                </SuperButton>\r\n\r\n                {/*----------------------------------------------------*/}\r\n\r\n                <SuperCheckbox\r\n                    checked={checked}\r\n                    onChangeChecked={setChecked}\r\n                >\r\n                    some text {/*// этот текст попадёт в children*/}\r\n                </SuperCheckbox>\r\n\r\n                {/*// onChange тоже должен работать*/}\r\n                <SuperCheckbox checked={checked} onChange={testOnChange}/>\r\n            </div>\r\n\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeSuperInputText/>*/}\r\n            {/*<AlternativeSuperButton/>*/}\r\n            {/*<AlternativeSuperCheckbox/>*/}\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HW4\r\n","import React from 'react'\r\nimport s from './App.module.css'\r\nimport HW1 from '../../../p2-homeworks/h1/HW1'\r\nimport HW2 from '../../../p2-homeworks/h2/HW2'\r\nimport HW3 from '../../../p2-homeworks/h3/HW3'\r\nimport HW4 from '../../../p2-homeworks/h4/HW4'\r\n\r\nfunction App() {\r\n    return (\r\n        <div className={s.App}>\r\n            <div>react homeworks:</div>\r\n            <HW1/>\r\n            <HW2/>\r\n            <HW3/>\r\n            <HW4/>\r\n            {/*<HW5/>*/}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        )\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config)\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    )\r\n                })\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing\r\n                if (installingWorker == null) {\r\n                    return\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            )\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration)\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.')\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error)\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type')\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload()\r\n                    })\r\n                })\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            )\r\n        })\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister()\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message)\r\n            })\r\n    }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './p1-main/m1-ui/u1-app/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}